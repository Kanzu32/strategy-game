@startuml
namespace classes {
    class Class << (S,Aquamarine) >> {
        + String() string

    }
    class classes.Class << (T, #FF7700) >>  {
    }
}



namespace components {
    class Class << (S,Aquamarine) >> {
        + Class classes.Class

    }
    class Energy << (S,Aquamarine) >> {
        + Energy uint8

    }
    class ImageRender << (S,Aquamarine) >> {
        + Options ebiten.DrawImageOptions

    }
    class Material << (S,Aquamarine) >> {
        + Material material.Material

    }
    class MoveDirection << (S,Aquamarine) >> {
        + X int8
        + Y int8

    }
    class Occupied << (S,Aquamarine) >> {
        + ActiveObject *ecs.Entity
        + UnitObject *ecs.Entity
        + StaticObject *ecs.Entity

    }
    class Position << (S,Aquamarine) >> {
        + X int
        + Y int

    }
    class Side << (S,Aquamarine) >> {
        + Side side.Side

    }
    class Sprite << (S,Aquamarine) >> {
        + Sprite sprite.Sprite

    }
    class Team << (S,Aquamarine) >> {
        + Team teams.Team

    }
    class Tween << (S,Aquamarine) >> {
        + Animation tween.TweenAnimation

    }
}


"components.Class" o-- "classes.Class"
"components.ImageRender" o-- "ebiten.DrawImageOptions"
"components.Material" o-- "material.Material"
"components.Occupied" o-- "ecs.Entity"
"components.Side" o-- "side.Side"
"components.Sprite" o-- "sprite.Sprite"
"components.Team" o-- "teams.Team"
"components.Tween" o-- "tween.TweenAnimation"

namespace ecs {
    class  << (S,Aquamarine) >> {
        + AddNewEntity(comp componentType) (Entity, error)
        + AddExistingEntity(entity Entity, comp componentType) error
        + RemoveEntity(entity Entity) error
        + HasEntity(entity Entity) bool
        + Entities() []Entity
        + Component(entity Entity) (*componentType, error)
        + EntityCount() int
        + String() string

    }
    interface AnyPool  {
        + HasEntity(entity Entity) bool
        + Entities() []Entity
        + EntityCount() int
        + RemoveEntity(entity Entity) error

    }
    class ComponentPool << (S,Aquamarine) >> {
        - denseComponents []componentType
        - denseEntities []Entity
        - sparseEntities parray.PageArray
        - world *World

    }
    class Entity << (S,Aquamarine) >> {
        - state uint8
        - id uint16
        - version uint8

        - isNil() bool
        - isRegistered() bool
        - setNil() 
        - setRegistered() 
        - clear() 

        + ID() uint16
        + String() string

    }
    class FlagPool << (S,Aquamarine) >> {
        - denseEntities []Entity
        - sparseEntities parray.PageArray
        - world *World

        + AddNewEntity() (Entity, error)
        + AddExistingEntity(entity Entity) (Entity, error)
        + RemoveEntity(entity Entity) error
        + HasEntity(entity Entity) bool
        + Entities() []Entity
        + EntityCount() int

    }
    interface RenderSystem  {
        + Run(screen *ebiten.Image) 

    }
    interface System  {
        + Run() 

    }
    class World << (S,Aquamarine) >> {
        - pools []AnyPool
        - systems []System
        - renderSystems []RenderSystem
        - next uint32
        - entities []Entity
        - destroyed Entity

        - registerNewEntity() (Entity, error)
        - isRegisteredEntity(entity Entity) bool

        + Update() 
        + Draw(screen *ebiten.Image) 
        + RemoveEntityFromWorld(entity Entity) 

    }
    class ecs.P << (T, #FF7700) >>  {
    }
}

"ecs.AnyPool" <|-- "ecs."
"ecs.AnyPool" <|-- "ecs.FlagPool"

"ecs.ComponentPool" o-- "ecs.Entity"
"ecs.ComponentPool" o-- "ecs.World"
"ecs.ComponentPool" o-- "ecs.componentType"
"ecs.ComponentPool" o-- "parray.PageArray"
"ecs.FlagPool" o-- "ecs.Entity"
"ecs.FlagPool" o-- "ecs.World"
"ecs.FlagPool" o-- "parray.PageArray"
"ecs.World" o-- "ecs.AnyPool"
"ecs.World" o-- "ecs.Entity"
"ecs.World" o-- "ecs.RenderSystem"
"ecs.World" o-- "ecs.System"

namespace game {
    class Game << (S,Aquamarine) >> {
        - world *ecs.World
        - ui ui.UI

        - handleInput() 
        - mousePosGameScale() (int, int)

        + StartGame() 
        + Update() error
        + Draw(screen *ebiten.Image) 
        + Layout(outsideWidth int, outsideHeight int) (int, int)

    }
}


"game.Game" o-- "ecs.World"
"game.Game" o-- "ui.UI"

namespace gamemode {
    class gamemode.GameMode << (T, #FF7700) >>  {
    }
}



namespace material {
    class material.Material << (T, #FF7700) >>  {
    }
}



namespace parray {
    class PageArray << (S,Aquamarine) >> {
        - data [][]int
        - pageSize uint16
        - arraySize int

        + Size() int
        + Set(index uint16, value int) 
        + Get(index uint16) int
        + String() string

    }
}



namespace psize {
    class psize.PageSize << (T, #FF7700) >>  {
    }
}



namespace side {
    class side.Side << (T, #FF7700) >>  {
    }
}



namespace sprite {
    class Frame << (S,Aquamarine) >> {
        + N int
        + Time int

    }
    class Sprite << (S,Aquamarine) >> {
        - image *ebiten.Image
        - width int
        - height int
        - framesX int
        - framesY int
        - currentAnimation string
        - currentFrame int

        + Animations <font color=blue>map</font>[string][]Frame

        + Width() int
        + Height() int
        + Animate(frameCounter int) *ebiten.Image
        + SetAnimation(animationName string) 
        + AddAnimation(animationName string, frames []Frame) 

    }
}


"sprite.Sprite" o-- "ebiten.Image"
"sprite.Sprite" o-- "sprite.Frame"

namespace stats {
    class Stats << (S,Aquamarine) >> {
        + MaxEnergy uint8
        + EnergyPerTurn uint8
        + MoveCost uint8
        + AttackCost uint8
        + ActionCost uint8

    }
}



namespace systems {
    class DrawGhostsSystem << (S,Aquamarine) >> {
        + Run(screen *ebiten.Image) 

    }
    class DrawWorldSystem << (S,Aquamarine) >> {
        + Run(screen *ebiten.Image) 

    }
    class MarkActiveTilesSystem << (S,Aquamarine) >> {
        + Run() 

    }
    class MarkActiveUnitsSystem << (S,Aquamarine) >> {
        + Run() 

    }
    class TurnSystem << (S,Aquamarine) >> {
        + Run() 

    }
    class TweenMoveSystem << (S,Aquamarine) >> {
        + Run() 

    }
    class UnitMoveSystem << (S,Aquamarine) >> {
        + Run() 

    }
}

"ecs.RenderSystem" <|-- "systems.DrawGhostsSystem"
"ecs.RenderSystem" <|-- "systems.DrawWorldSystem"
"ecs.System" <|-- "systems.MarkActiveTilesSystem"
"ecs.System" <|-- "systems.MarkActiveUnitsSystem"
"ecs.System" <|-- "systems.TurnSystem"
"ecs.System" <|-- "systems.TweenMoveSystem"
"ecs.System" <|-- "systems.UnitMoveSystem"


namespace teams {
    class Team << (S,Aquamarine) >> {
        + String() string

    }
    class teams.Team << (T, #FF7700) >>  {
    }
}



namespace tile {
    class PropertyJSON << (S,Aquamarine) >> {
        + Name string
        + Value string

    }
    class TileInfoJSON << (S,Aquamarine) >> {
        + Id int
        + Frames []sprite.Frame
        + Properties []PropertyJSON

    }
    class TilemapJSON << (S,Aquamarine) >> {
        + Layers []TilemapLayerJSON

    }
    class TilemapLayerJSON << (S,Aquamarine) >> {
        + Data []int
        + Width int
        + Height int

    }
    class TilesetArray << (S,Aquamarine) >> {
        + Data []tilesetJSON

        + Get(n int) tileData

    }
    class tileData << (S,Aquamarine) >> {
        + Sprite sprite.Sprite
        + Material material.Material
        + Side side.Side
        + IsActive bool
        + IsSoft bool
        + IsWall bool
        + IsUnit bool
        + Team int
        + Class int

    }
    class tilesetJSON << (S,Aquamarine) >> {
        + Width int
        + Height int
        + TilesInfo []TileInfoJSON
        + TileCount int
        + ImagePath string
        + Image *ebiten.Image

    }
}


"tile.TileInfoJSON" o-- "sprite.Frame"
"tile.TileInfoJSON" o-- "tile.PropertyJSON"
"tile.TilemapJSON" o-- "tile.TilemapLayerJSON"
"tile.TilesetArray" o-- "tile.tilesetJSON"
"tile.tileData" o-- "material.Material"
"tile.tileData" o-- "side.Side"
"tile.tileData" o-- "sprite.Sprite"
"tile.tilesetJSON" o-- "ebiten.Image"
"tile.tilesetJSON" o-- "tile.TileInfoJSON"

namespace turn {
    class Turn << (S,Aquamarine) >> {
        + CurrentTurn teams.Team
        + PlayerTeam teams.Team
        + State turnstate.TurnState

    }
}


"turn.Turn" o-- "teams.Team"
"turn.Turn" o-- "turnstate.TurnState"

namespace turnstate {
    class TurnState << (S,Aquamarine) >> {
        + String() string

    }
    class turnstate.TurnState << (T, #FF7700) >>  {
    }
}



namespace tween {
    class TransitionValues << (S,Aquamarine) >> {
        + X float64
        + Y float64
        + Angle float64

    }
    class TweenAnimation << (S,Aquamarine) >> {
        + Type tweentype.TweenType
        + FrameTime float64
        + CurrentFrameTime float64
        + DeltaValues TransitionValues

        + Animate() TransitionValues
        + GetValue() TransitionValues
        + IsEnded() bool

    }
}


"tween.TweenAnimation" o-- "tween.TransitionValues"
"tween.TweenAnimation" o-- "tweentype.TweenType"

namespace tweentype {
    class tweentype.TweenType << (T, #FF7700) >>  {
    }
}



namespace ui {
    class UI << (S,Aquamarine) >> {
        - ui ebitenui.UI
        - textFace *text.GoXFace
        - sliceStandard *image.NineSlice
        - sliceIron *image.NineSlice
        - sliceWood *image.NineSlice
        - slicePaper *image.NineSlice
        - sliceIronLight *image.NineSlice
        - backButtonImage *ebiten.Image
        - plusButtonImage *ebiten.Image
        - minusButtonImage *ebiten.Image

        + Draw(screen *ebiten.Image) 
        + Update() 
        + ShowGameControls() 
        + ShowMainMenu() 
        + ShowLogin() 

    }
}


"ui.UI" o-- "ebiten.Image"
"ui.UI" o-- "ebitenui.UI"
"ui.UI" o-- "image.NineSlice"
"ui.UI" o-- "text.GoXFace"

namespace uistate {
    class uistate.UIState << (T, #FF7700) >>  {
    }
}



"__builtin__.uint16" #.. "psize.PageSize"
"__builtin__.uint8" #.. "classes.Class"
"__builtin__.uint8" #.. "gamemode.GameMode"
"__builtin__.uint8" #.. "material.Material"
"__builtin__.uint8" #.. "side.Side"
"__builtin__.uint8" #.. "teams.Team"
"__builtin__.uint8" #.. "turnstate.TurnState"
"__builtin__.uint8" #.. "tweentype.TweenType"
"__builtin__.uint8" #.. "uistate.UIState"
"ecs.AnyPool" #.. "ecs.P"
@enduml
