package clientcon_test

import (
	"SERV/clientcon"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestSendData(t *testing.T) {
	w := httptest.NewRecorder()
	r := httptest.NewRequest("GET", "/", nil)
	conn := clientcon.NewClientConnection(w, r)

	testData := `{"test":"data"}`
	err := conn.SendData(testData)
	if err != nil {
		t.Fatalf("SendData failed: %v", err)
	}

	if w.Header().Get("Content-Type") != "application/json" {
		t.Error("Content-Type header not set correctly")
	}

	if w.Code != http.StatusOK {
		t.Errorf("Expected status code %d, got %d", http.StatusOK, w.Code)
	}

	if body := w.Body.String(); body != testData {
		t.Errorf("Expected body %q, got %q", testData, body)
	}
}

func TestReceiveData(t *testing.T) {
	testData := `{"key":"value"}`
	r := httptest.NewRequest("POST", "/", strings.NewReader(testData))
	w := httptest.NewRecorder()
	conn := clientcon.NewClientConnection(w, r)

	data, err := conn.ReceiveData()
	if err != nil {
		t.Fatalf("ReceiveData failed: %v", err)
	}

	if val, ok := data["key"]; !ok || val != "value" {
		t.Errorf("Expected data with key 'key' and value 'value', got %v", data)
	}
}

func TestReceiveData_InvalidJSON(t *testing.T) {
	r := httptest.NewRequest("POST", "/", strings.NewReader("invalid json"))
	w := httptest.NewRecorder()
	conn := clientcon.NewClientConnection(w, r)

	_, err := conn.ReceiveData()
	if err == nil {
		t.Error("Expected error for invalid JSON, got nil")
	}
}